load('//antlir/bzl:oss_shim.bzl', 'http_file', 'export_file')
load('//antlir/bzl:image.bzl', 'image')
load(':hoist.bzl', 'hoist')

# these need to be updated manually based on the downloaded version
qemu = {
    'version': '6.0.0',
    'sha256': '87bc1a471ca24b97e7005711066007d443423d19aacda3d442558ae032fa30b9',
}
pixman = {
    'version': '0.40.0',
    'sha256': '3a68a28318a78fffc61603c8385bb0010c3fb23d17cd1285d36a7148c87a3b91',
}

# check out the build script to see how these are used
export_file(name = 'build.sh')
export_file(name = 'meson.build.patch')
export_file(name = 'libcap-ng.pc.patch')

http_file(
    name = 'source',
    urls = ['https://download.qemu.org/qemu-{}.tar.xz'.format(qemu['version'])],
    sha256 = qemu['sha256'],
)

# we also need to build a static version of pixman
http_file(
    name = 'pixman',
    urls = ['https://github.com/freedesktop/pixman/archive/refs/tags/pixman-{}.tar.gz'.format(pixman['version'])],
    sha256 = pixman['sha256'],
)

image.layer(
    name = '_base',
    parent_layer = '//images/appliance:stable-build-appliance',
    features = [
        image.rpms_install([
            # dependencies listed at https://wiki.qemu.org/Hosts/Linux
            'git', 'bzip2', 'python3', 'ninja-build',
            'glib2-devel', 'libfdt-devel', 'pixman-devel', 'zlib-devel',
            # static build dependencies (at least on this builder image)
            'glib2-static', 'glibc-static', 'pcre-static', 'zlib-static',
            'libzstd-static', 'autoconf', 'libtool',
            # needed for virtfs
            'libcap-ng-devel', 'libattr-devel',
        ]),
    ],
)

image.layer(
    name = '_setup',
    parent_layer = ':_base',
    features = [
        # genrule_layer runs as user 'nobody' by default
        image.ensure_subdirs_exist('/', '_temp_qemu', user='nobody'),
        image.ensure_subdirs_exist('/', 'output', user='nobody'),

        # put sources and build script in the base layer
        image.install(':build.sh', '/_temp_qemu/build.sh'),
        image.install(':source', '/_temp_qemu/source.tar.xz'),
        image.install(':pixman', '/_temp_qemu/pixman.tar.gz'),
        image.install(':meson.build.patch', '/_temp_qemu/meson.build.patch'),
        image.install(':libcap-ng.pc.patch', '/_temp_qemu/libcap-ng.pc.patch'),
    ],
)

image.genrule_layer(
    name = '_build',
    parent_layer = ':_setup',
    rule_type = 'build',
    antlir_rule = 'user-internal',
    user = 'root',  # needed to patch .pc files, sometimes for untarring
    cmd = [
        '/bin/sh', '-c',
        'cd /_temp_qemu && bash build.sh {} {}'.format(qemu['version'], pixman['version']),
    ],
)

vm_visibility = [
    '//antlir/linux/...',
    '//antlir/vm/...',
    '//third-party/...',
]

hoist(
    name = 'qemu',
    out = 'qemu',
    layer = '_build',
    path = '/output/qemu/bin/qemu-system-x86_64',
    visibility = vm_visibility,
)

hoist(
    name = 'qemu-img',
    out = 'qemu-img',
    layer = '_build',
    path = '/output/qemu/bin/qemu-img',
    visibility = vm_visibility,
)

[
    hoist(
        name = 'share/qemu/{}'.format(rom),
        out = rom,
        layer = '_build',
        path = '/output/qemu/share/qemu/{}'.format(rom),
        visibility = vm_visibility,
    ) for rom in [
        'bios-256k.bin',
        'efi-virtio.rom',
        'kvmvapic.bin',
        'linuxboot_dma.bin',
        'vgabios-stdvga.bin',
    ]
]
